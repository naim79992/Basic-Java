When to Use Generic Classes in Java?
âœ… 1. Type Safety â€“ Prevents incorrect data types and avoids ClassCastException.
âœ… 2. Code Reusability â€“ One class works for multiple data types.
âœ… 3. Compile-Time Checking â€“ Errors are caught during compilation.
âœ… 4. Collections Framework â€“ Used in ArrayList<T>, HashMap<K, V>, etc.
âœ… 5. Custom Data Structures â€“ Generic stacks, queues, trees handle various data types.
Structure: 
className<T> { // T is a type parameter(***)
    T obj; // T is a type variable
    void add(T obj) { this.obj = obj; }
    T get() { return obj; }
}
------------

Raw type in gneric class-> specifying its type parameters na korle raw type hoy, ete j kono type er data rakha jay
Raw type use korle type safety thake na
compiler error kono var e rakhte gele oi var er type specify korte hobe
------------
Bounded generics: restrict the types a generic class/method can accept.  

1. Upper Bounded (`extends`) â†’ Allows a class & its subclasses  

class Box<T extends Number> {  // T must be Number or its subclass (Integer, Double, etc.)
    T value;
    Box(T value) { this.value = value; }
}

âœ” Use `extends` when you need a **type & its subtypes**.  

2. Lower Bounded (`super`) â†’ Allows a class & its superclasses  

void addNumbers(List<? super Integer> list) {  
    list.add(10);  // âœ… Can add Integer
}

âœ” Use `super` when adding elements **to ensure flexibility**.  
3. Multiple Bounds (`extends Class & Interfaces`) 
interface Printable { void print(); }

class Data<T extends Number & Printable> { }  // âœ… Must be Number + implement Printable

âœ” Only one class + multiple interfaces are allowed. 

Quick Summary for Interviews:  
âœ” **`extends` â†’ Allows T & its subclasses**  
âœ” **`super` â†’ Allows T & its superclasses**  
âœ” **One class + multiple interfaces are allowed**  

ðŸ’¡ **Tip:** If asked in an interview, explain with a simple example! ðŸš€